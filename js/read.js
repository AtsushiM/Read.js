// Generated by CoffeeScript 1.6.3
(function(win, doc, required_obj, reg_readmethod, time, ev, tag, ext) {
  var checkPersence, errorNotFound, getFile, read, srcpathNoCache, xhrSyncScriptLoad;
  errorNotFound = function(required) {
    throw Error('not found ' + required);
  };
  srcpathNoCache = function(srcpath) {
    return srcpath + time;
  };
  checkPersence = function(required) {
    var i, temp;
    required = required.split('.');
    temp = win;
    for (i in required) {
      temp = temp[required[i]];
      if (!temp) {
        break;
      }
    }
    return temp;
  };
  getFile = function(srcpath, callback) {
    var res, xhr;
    res = '';
    xhr = new XMLHttpRequest;
    xhr.onreadystatechange = function() {
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          res = '\n' + xhr.responseText;
        } else {
          errorNotFound(srcpath);
        }
        if (callback) {
          callback(res);
        }
      }
    };
    xhr.open('GET', srcpathNoCache(srcpath), !!callback);
    xhr.send();
    return res;
  };
  xhrSyncScriptLoad = function(srcpath) {
    doc.head.appendChild(doc.createElement(tag)).text = getFile(srcpath);
  };
  (read = win['read'] = function(required, srcpath) {
    var cls;
    if (!(cls = checkPersence(required))) {
      if (srcpath && !required_obj[srcpath]) {
        required_obj[srcpath += ext] = true;
        xhrSyncScriptLoad(srcpath);
      } else {
        errorNotFound(required);
      }
    }
    if (!(cls = checkPersence(required))) {
      errorNotFound(required);
    }
    return cls;
  })['ns'] = function(keywords, swap) {
    var i, len, par, temp;
    keywords = keywords.split('.');
    i = 0;
    len = keywords.length;
    temp = win;
    while (i < len) {
      par = temp;
      if (temp[keywords[i]]) {
        temp = temp[keywords[i]];
      } else {
        temp = temp[keywords[i]] = {};
      }
      i++;
    }
    if (swap) {
      for (i in temp) {
        if (swap[i] === void 0) {
          swap[i] = temp[i];
        }
      }
      temp = par[keywords[len - 1]] = swap;
    }
    return temp;
  };
  read['run'] = function(path) {
    var checkReadLoop, loadLoop, loaded_paths, nextRead, require_ary, unitefile;
    path = path + ext;
    require_ary = [];
    loaded_paths = {};
    unitefile = '';
    checkReadLoop = function(jspath) {
      require_ary.unshift(jspath);
      if (!required_obj[jspath]) {
        required_obj[jspath] = 1;
        if (!jspath.match(/^(\/\/|http)/)) {
          console.log(jspath);
          getFile(jspath, function(filevalue) {
            unitefile = filevalue + unitefile;
            nextRead(filevalue);
          });
        } else {
          console.log(jspath);
          require_ary.unshift(jspath);
          nextRead(filevalue);
        }
      }
    };
    nextRead = function(filevalue) {
      var result, temp;
      if (result = unitefile.match(reg_readmethod)) {
        temp = result[1] + ext;
        unitefile = unitefile.slice(result.index + result[0].length);
        require_ary.unshift(temp);
        return checkReadLoop(temp);
      }
      return loadLoop();
    };
    loadLoop = function() {
      var loadaction, script, src;
      if (src = require_ary.shift()) {
        if (!loaded_paths[src]) {
          loaded_paths[src] = 1;
          script = doc.createElement(tag);
          loadaction = function() {
            script.removeEventListener(ev, loadaction);
            loadLoop();
          };
          script.addEventListener(ev, loadaction);
          script.src = srcpathNoCache(src);
          doc.head.appendChild(script);
        } else {
          loadLoop();
        }
      }
    };
    checkReadLoop(path);
  };
})(window, document, {}, /[=,;:&\n\(\|]\s*read\(.+?,\s*['"](.+?)['"]\)/, '?' + new Date * 1, 'load', 'script', '.js');
