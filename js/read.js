// Generated by CoffeeScript 1.6.3
(function(win, doc, required_obj, reg_readmethod, errorNotFound) {
    win['read'] = function read(required, srcpath) {
        var cls = presenceCheck(required);

        if (!cls) {
            if (srcpath && !required_obj[srcpath]) {
                required_obj[srcpath] = true;
                srcpath += '.js';
                xhrSyncScriptLoad(srcpath);
            } else {
                errorNotFound(required);
            }
        }
        if (!(cls = presenceCheck(required))) {
            errorNotFound(required);
        }
        return cls;
    };

    read['ns'] = function(keywords, swap) {
        keywords = keywords.split('.');

        var i = 0,
            len = keywords.length,
            par,
            temp = win;

        while (i < len) {
            if (!temp[keywords[i]]) {
                break;
            }
            par = temp;
            temp = temp[keywords[i]];
            i++;
        }
        while (i < len) {
            par = temp;
            temp = temp[keywords[i]] = {};
            i++;
        }
        if (swap) {
            for (i in temp) {
                if (swap[i] === void 0) {
                    swap[i] = temp[i];
                }
            }
            temp = par[keywords[len - 1]] = swap;
        }
        return temp;
    };
    read['run'] = function(path) {
        path = path + '.js';

        var require_ary = [];

        checkReadLoop(path);
        required_obj[path] = true;
        require_ary.push(path);

        loadLoop();

        function checkReadLoop(jspath) {
            var filevalue = xhrGet(jspath),
                result,
                temp;

            while (result = filevalue.match(reg_readmethod)) {
                temp = result[2] + '.js';
                if (!required_obj[temp]) {
                    required_obj[temp] = true;
                    checkReadLoop(temp);
                    require_ary.push(temp);
                }
                filevalue = filevalue.slice(result.index + result[0].length);
            }
        };

        function loadLoop() {
            var loadaction, script, src;
            if (src = require_ary.shift()) {
                script = doc.createElement('script');
                loadaction = function() {
                    script.removeEventListener('load', loadaction);
                    loadLoop();
                };
                script.addEventListener('load', loadaction);
                script.src = src;
                doc.head.appendChild(script);
            }
        };
    };

    function presenceCheck(required) {
        var i,
            temp = win;

        required = required.split('.');

        for (i in required) {
            temp = temp[required[i]];
            if (!temp) {
                break;
            }
        }
        return temp;
    }

    function xhrGet(srcpath) {
        var res = '',
            xhr = new XMLHttpRequest;

        xhr.onreadystatechange = function() {
            if (xhr.readyState == 4) {
                if (xhr.status == 200) {
                    res = xhr.responseText;
                } else {
                    errorNotFound(srcpath);
                }
            }
        };
        xhr.open('GET', srcpath + '?t=' + new Date * 1, false);
        xhr.send();
        return '\n' + res.replace(/\r\n?/g, '\n');
    }
    function xhrSyncScriptLoad(srcpath) {
        var res = xhrGet(srcpath);
        doc.head.appendChild(doc.createElement('script')).text = '//src:' + srcpath + res;
    }

})(window, document, {}, /(\n|=|,|;|:|\(|&|\|)\s*read\(.+?,\s*['"](.+?)['"]\)/, (function(required) {
    throw Error('not found ' + required);
}));
