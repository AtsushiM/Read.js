// Generated by CoffeeScript 1.6.3
(function() {
  var dispLog, doc, errorNotFound, presenceCheck, read, required_obj, sequence, win;
  win = window;
  doc = document;
  required_obj = {};
  sequence = [];
  errorNotFound = function(required) {
    throw Error('not found ' + required);
  };
  dispLog = function() {
    if (window.console) {
      return console.log.apply(console, arguments);
    }
  };
  presenceCheck = function(required) {
    var temp, val, _i, _len, _ref;
    temp = win;
    _ref = required.split('.');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      val = _ref[_i];
      temp = temp[val];
      if (!temp) {
        break;
      }
    }
    return temp;
  };
  read = function(required, srcpath) {
    var cls, xhr;
    cls = presenceCheck(required);
    if (!cls) {
      if (srcpath && !required_obj[srcpath]) {
        required_obj[srcpath] = true;
        srcpath += '.js';
        xhr = new XMLHttpRequest;
        xhr.onreadystatechange = function() {
          var script;
          if (xhr.readyState === 4) {
            if (xhr.status === 200) {
              doc.head.appendChild(script = doc.createElement('script'));
              script.text = '// src: ' + srcpath + '.js\n' + xhr.responseText;
              dispLog(srcpath, script);
              sequence.push(srcpath);
            } else {
              throw Error('file load error: ' + required);
            }
          }
        };
        xhr.open('GET', srcpath + '?t=' + (+(new Date)), false);
        xhr.send();
      } else {
        errorNotFound(required);
      }
    }
    if (!(cls = presenceCheck(required))) {
      errorNotFound(required);
    }
    return cls;
  };
  read['orderLog'] = function() {
    var log, val, _i, _len;
    log = '';
    for (_i = 0, _len = sequence.length; _i < _len; _i++) {
      val = sequence[_i];
      log += val + ' ';
    }
    dispLog(log);
    return sequence;
  };
  win['read'] = read;
})();
